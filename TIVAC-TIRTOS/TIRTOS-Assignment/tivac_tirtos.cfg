/*
 * Copyright (c) 2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
//var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var Task = xdc.useModule('ti.sysbios.knl.Task');
System.SupportProxy = SysMin;

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

/* ================ Kernel configuration ================ */
/* Use Custom library */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;
Program.stack = 1024;
BIOS.heapSize = 0;
BIOS.cpuFreq.lo = 40000000;
LoggingSetup.sysbiosSwiLogging = false;
var task0Params = new Task.Params();
task0Params.instance.name = "ledToggleTask";
Program.global.ledToggleTask = Task.create("&ledToggle", task0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "LEDSem";
Program.global.LEDSem = Semaphore.create(null, semaphore0Params);
LoggingSetup.loadTaskLogging = true;
LoggingSetup.sysbiosSemaphoreLogging = true;
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "ADC3Sem";
Program.global.ADC3Sem = Semaphore.create(null, semaphore1Params);
var task1Params = new Task.Params();
task1Params.instance.name = "getADC3Task";
Program.global.getADC3Task = Task.create("&getADC3", task1Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "UARTSem";
Program.global.UARTSem = Semaphore.create(0, semaphore2Params);
var task2Params = new Task.Params();
task2Params.instance.name = "UARTdisplayADCTask";
Program.global.UARTdisplayADCTask = Task.create("&UARTdisplayADC", task2Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "Timer_2A_int";
Program.global.Timer_2A_int = Hwi.create(39, "&Timer_ISR", hwi1Params);
var task3Params = new Task.Params();
task3Params.instance.name = "SW_Read";
Program.global.SW_Read = Task.create("&calculateDC", task3Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "SW_ReadSem";
Program.global.SW_ReadSem = Semaphore.create(null, semaphore3Params);
